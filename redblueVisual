package redblueGame;

import java.awt.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.font.*;

import javax.swing.JFrame;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import redblueGame.redblueBoard;
import redblueGame.mainFrameExample;;

public class redblueVisual extends JFrame implements KeyListener
{
	static int redRow;
	static int redColumn;
	static int blueRow;
	static int blueColumn;
	static redblueBoard board;
	static redblueVisual t;
	
    public redblueVisual()
    {
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
    	setTitle("Tutorial");
        setSize(600, 700);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        addKeyListener(this);
        setVisible(true);
    }

    public void keyPressed(KeyEvent e) {
    	if(e.getKeyCode()== KeyEvent.VK_LEFT)
    		board.makeMove(3, board.findRow(3), board.findColumn(3)-1);

    	else if (e.getKeyCode()== KeyEvent.VK_UP)
    		board.makeMove(3, board.findRow(3)-1, board.findColumn(3));

    	else if (e.getKeyCode()== KeyEvent.VK_RIGHT)
    		board.makeMove(3, board.findRow(3), board.findColumn(3)+1);

    	else if (e.getKeyCode()== KeyEvent.VK_DOWN)
    		board.makeMove(3, board.findRow(3)+1, board.findColumn(3));
    	
    	else if (e.getKeyCode()== KeyEvent.VK_A)
    		board.makeMove(2, board.findRow(2), board.findColumn(2)-1);
    	
    	else if (e.getKeyCode()== KeyEvent.VK_W)
    		board.makeMove(2, board.findRow(2)-1, board.findColumn(2));
    	
    	else if (e.getKeyCode()== KeyEvent.VK_D)
    		board.makeMove(2, board.findRow(2), board.findColumn(2)+1);
    	
    	else if (e.getKeyCode()== KeyEvent.VK_S)
    		board.makeMove(2, board.findRow(2)+1, board.findColumn(2));
    		
      	t.repaint();
    }

    public void keyReleased(KeyEvent e) {

    }
    
    public void keyTyped(KeyEvent e) {
    	
    }
    
    public void paint(Graphics g)
    {
    	for (int i = 0; i < board.getBoard().length; i++)
    	{
    		for (int j = 0; j < board.getBoard()[0].length; j++)
    		{
    			if (board.getBoard()[i][j] == 2)
    				g.setColor(Color.blue);
    			else if (board.getBoard()[i][j] == 3)
    				g.setColor(Color.red);
    			else if (board.getBoard()[i][j] == 5)
    				g.setColor(Color.yellow);
    			else 
    				g.setColor(new Color(91,13,91));
    			g.fillRect(j*60 + 150, i*60 + 150, 55, 55);
    		}
    	}
    	
    	g.setColor(new Color(0,204,255));
    	g.fillOval(board.findColumn(2)*60 + 150, (board.findRow(2)+1)*60 + 115, 30, 30);
    	g.setColor(new Color(255,120,120));
    	g.fillOval((board.findColumn(3)+1)*60 + 115, (board.findRow(3)+1)*60 + 90, 30, 30);
    	g.setColor(new Color(237,237,237)); 
    	g.fillRect(70, 60, 150, 80);
    	g.setColor(Color.BLACK);
    	g.setFont(new Font("default", Font.BOLD, 40)); 
    	g.drawString(String.valueOf(board.getScore()), 100, 100);
    }

     public static void main(String[] args)
     {
    	 javax.swing.SwingUtilities.invokeLater(new Runnable() {
             public void run() 
             {
                 mainFrameExample frame = new mainFrameExample();
                 frame.setTitle("Square Move Practice");
                 frame.setResizable(false);
                 frame.setSize(600, 600);
                 frame.setMinimumSize(new Dimension(600, 600));
                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                 frame.pack();
                 
                 board = new redblueBoard();
               	 
               	 t = new redblueVisual();
                 t.invalidate();
               	 t.validate();
               	 t.repaint();
               	
             }
         });
    	 
     }
     
}
